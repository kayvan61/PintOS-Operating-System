                     +--------------------------+
                     |         EE 461S          |
                     | PROJECT 2: USER PROGRAMS |
                     |      DESIGN DOCUMENT     |
                     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Ali Mansoorshahi <kayvan.mansoor@utexas.edu>
Utsha Khondkar <utsha.kh@utexas.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.
>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

used page fault hander to do pointer checking

                           ARGUMENT PASSING
                           ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

None.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

The command string is passed to load which then passes it to setup_stack (process.c).
The command string is then split along spaces using strtok_r. This takes care of double spaces case.
This is then coppied into a temporary array of tokens.
Once the whole string is tokenized we place the elements onto the stack in reverse order.
Every token that is pushed has the esp value they are located at saved in another array.
Then we push the padding, the null, the pointers, the pointer to the pointers, and the count.

To prevent overflowing we the stack page we rely on the pagefault handler + the provided funcitons
to validate the stack pointer after every movement of the stack pointer. If it points to an invalid address then we kill the process. 

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

strtok is not safe to use in a multi-threaded program.
If a function used strtok and the scheduler changed which thread was running the output from strtok
would fail when the original thread was resumed.
Since pintos is an operating system which is very much multi-threaded we use a reentrant version of strtok. 

                             SYSTEM CALLS
                             ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct thread
  {
    /* Owned by thread.c. */
    tid_t tid;                          /* Thread identifier. */
    enum thread_status status;          /* Thread state. */
    char name[16];                      /* Name (for debugging purposes). */
    uint8_t *stack;                     /* Saved stack pointer. */
    int priority;                       /* Priority. */
    struct list_elem allelem;           /* List element for all threads list. */

    /* Shared between thread.c and synch.c. */
    struct list_elem elem;              /* List element. */

    int returnCode;

    /* to deny writes during execution */
    struct file* selfOnDisk;

    /* fd table */
    bool isFdInit;
    struct file **fdTable;
    int fdCount;
    int fdCap;

    /* children tracking for waiting */
    struct list children;
    int waitingOnTid;
    struct semaphore waitingLock;
    struct thread* parent;

    /* synchro for exec */
    bool isChildMadeSuccess;
    struct semaphore childExecLock;

#ifdef USERPROG
    /* Owned by userprog/process.c. */
    uint32_t *pagedir;                  /* Page directory. */
#endif

    /* Owned by thread.c. */
    unsigned magic;                     /* Detects stack overflow. */
  };

struct child_return_info {
  tid_t tid;
  struct list_elem elem;
  int returnCode;
  bool hasBeenChecked;
};

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

File descriptors are unique per process but their pointer to an iNode memory is not.
Each process has its own File descriptor table and each open file gets a new file descriptor.

Files contain an iNode which represents their contents in memory. While the file is open all processes that try
to open the file will get a file descriptor with the same iNode (but different offset).
If the file is not open first then the first process to open the file will get a unique iNode.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

All writes and reads are done without validation. if it result in a page fault then the page fault handler returns -1 to the kernel.
The kernel then kills the process if it gets a -1 after a write or a fail after a read.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

(full page)
1 minimum if the data is only contained in one page
4096 maximum if the data is scattered across pages
(2 bytes)
1 minimum if the data is only contained in one page
2 maximum if the data is across a page boundary

This can be improved by attempting to keep fragmenting low and trying to keep
all data in the minimum amount of pages possible. 



>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

wait is implemented as a call to process_wait. process_wait first iterates over a list of all children to a process.
if the tid is not in the list then it returns -1. Then it checks if that process is already done. if it is then it returns the status code and
removes the child entry from the list. if it is not done then the waiting process will attempt to sema_down on a waiting semaphore. When a child
exits it must set the done flag in the parent process and call sema up on the parents waiting semaphore. all processes will exit like this.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

writes and reads are all checked through the put_user and get_user functions. these functions do error checking for us.
The main mechanism of error checking is tucked away into the pagefault handler thus leaving only a few lines of assembler
visible in the syscall functions. once a process has started we ensure that it calls exit() before returning.
sigkill will result in a exit(-1) call, pagefault failure will result in a exit(-1), etc. in exit we unlock all locks and
free and resources the thread is holding on to. FInally we call thread_exit which frees all the lists and malloced elements
that are stored in each thread.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

In the thread struct, we added a bool variable "isChildMadeSuccess", and a semaphore "childExecLock" to synchronize the exec() syscall.
In the start_process(), we do sema_up() the childExecLock after the loading new process. If the child process is successfully loaded,
we set the variable isChildMadeSuccess in the parent thread to be True, and otherwise False.
In the exec() function, the parent process is waiting for the child process to complete loading
by using sema_down() the childExecLock. Once the semaphore is passed, it checks the variable isChildMadeSuccess
to see whether the loading was successful or not, and returns -1 or tid depending on the result.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

wait before C exits:
wait will call sema_down on a semaphore that initially is 0.
The child then calls sema_up on that semaphore.

wait after C exits:
the child C will set a flag in the parent's reference to it telling the parent that C is exiting.
When P waits on C it checks this flag before calling sema_down.

P terminates before C:
when a process terminates is goes through its child list and orphans all of them then it frees itself.
C then sees it has no parent upon exiting and exits without issue.

P terminates after C:
P frees the list after it is done even if it hasn't checked the child explicitly the child's reference will be freed in the parents memory.


---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

Because the Doc said that using page_fault handler was fast.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

Advantages:    no explicit upper limit on open files. Amortized doubling. reuses file descriptors that are closed.
Disadvantages: calls realloc so its slow. have to keep in mind the mapping from fd number to fd index.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

nope.

                           SURVEY QUESTIONS
                           ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want -- these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the semester.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

using the page_fault thing was tough because understanding interrupt frames was hard.

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

using the page_fault handler because it gave a deeper understanding of interrupts and forced us to read some assembly.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

nope.

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

TAs did a great job responding to Piazza quickly and being very helpful.

>> Any other comments?

Thanks to the TAs <3
